### Input params check
cmake_minimum_required(VERSION 3.0)

string(COMPARE EQUAL "@configure_command@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "configure_command is empty")
endif()

string(COMPARE EQUAL "@qt_component@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "qt_component is empty")
endif()

string(COMPARE EQUAL "@hunter_self@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "hunter_self is empty")
endif()

string(COMPARE EQUAL "@is_release_debug@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "is_release_debug is empty")
endif()

string(COMPARE EQUAL "@is_release@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "is_release is empty")
endif()

string(COMPARE EQUAL "@is_debug@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "is_debug is empty")
endif()

string(COMPARE EQUAL "@HUNTER_Qt_VERSION@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "HUNTER_Qt_VERSION is empty")
endif()

### -- end

include("@hunter_self@/scripts/clear-all.cmake")

list(APPEND CMAKE_MODULE_PATH "@hunter_self@/cmake/modules")

include(hunter_generate_qt_info)

hunter_generate_qt_info(
    "@qt_component@"
    components_toskip
    depends_on
    nobuild_list
    "@HUNTER_Qt_VERSION@"
    "@ANDROID@"
    "@WIN32@"
)

message("\nBuilding Qt component:\n  @qt_component@\n")

message("Dependent components:")
foreach(x ${depends_on})
  message("  ${x}")
endforeach()
message("\n")

message("Components to skip:")
set(components_opts)
foreach(x ${components_toskip})
  message("  ${x}")
  list(APPEND components_opts "-skip" "${x}")
endforeach()
message("\n")

set(configure_command "@configure_command@" ${components_opts})

if("@IOS@")
  set(dev_archs_oneline "@IPHONEOS_ARCHS@")
  set(sim_archs_oneline "@IPHONESIMULATOR_ARCHS@")

  string(REPLACE ";" " " dev_archs_oneline "${dev_archs_oneline}")
  string(REPLACE ";" " " sim_archs_oneline "${sim_archs_oneline}")

  set(
      conf_path
      "${CMAKE_CURRENT_LIST_DIR}/qtbase/mkspecs/macx-ios-clang/qmake.conf"
  )

  file(STRINGS "${conf_path}" lines)

  set(output_content "")
  foreach(line ${lines})
    set(output ${line})
    string(
        REGEX
        REPLACE
        "^QMAKE_IOS_DEVICE_ARCHS = .*$"
        "QMAKE_IOS_DEVICE_ARCHS = ${dev_archs_oneline}"
        output
        "${output}"
    )
    string(
        REGEX
        REPLACE
        "^QMAKE_IOS_SIMULATOR_ARCHS = .*$"
        "QMAKE_IOS_SIMULATOR_ARCHS = ${sim_archs_oneline}"
        output
        "${output}"
    )
    set(output_content "${output_content}\n${output}")
  endforeach()

  file(WRITE "${conf_path}" "${output_content}\n")
endif()

if("@IOS@" AND NOT "@is_release_debug@")
  # Workaround for https://bugreports.qt.io/browse/QTBUG-48348

  if("@is_release@")
    set(pattern_to_remove ".*_populate_.*_target_properties\\(DEBUG .*")
  elseif("@is_debug@")
    set(pattern_to_remove ".*_populate_.*_target_properties\\(RELEASE .*")
  else()
    message(FATAL_ERROR "Not Release and not Debug")
  endif()

  set(
      template_path
      "${CMAKE_CURRENT_LIST_DIR}/qtbase/mkspecs/features/data/cmake/Qt5BasicConfig.cmake.in"
  )

  file(STRINGS "${template_path}" lines)

  set(output_content "")
  foreach(line ${lines})
    set(output ${line})
    string(REGEX REPLACE "${pattern_to_remove}" "" output "${output}")
    set(output_content "${output_content}\n${output}")
  endforeach()

  file(WRITE "${template_path}" "${output_content}\n")
endif()

message("Qt configure command: ${configure_command}")

execute_process(COMMAND ${configure_command} RESULT_VARIABLE result)

if(NOT result EQUAL 0)
  message(FATAL_ERROR "Qt configure failed: ${result}")
endif()
