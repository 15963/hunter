# Copyright (c) 2013, Ruslan Baratov
# All rights reserved.

if(DEFINED HUNTER_CMAKE_HUNTER_)
  return()
else()
  set(HUNTER_CMAKE_HUNTER_ 1)
endif()

option(HUNTER_STATUS_PRINT "Print working status" ON)
option(HUNTER_STATUS_DEBUG "Print a lot info" OFF)

# If HUNTER_ROOT is defined by user, check it is correct.
# Note: it's can't be defined by other Hunter master file
# because of header guards
if(HUNTER_ROOT)
  get_filename_component(HUNTER_ROOT_OLD "${HUNTER_ROOT}" ABSOLUTE)
endif()

get_filename_component(HUNTER_ROOT "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)

### test self
if(NOT EXISTS "${HUNTER_ROOT}/Source/cmake/Hunter")
  message(
      FATAL_ERROR
      "Can't find Hunter components in: `${HUNTER_ROOT}` "
      "Expected location: <HUNTER_ROOT>/Source/cmake/Hunter"
  )
endif()

### add cmake modules to search path
list(APPEND CMAKE_MODULE_PATH "${HUNTER_ROOT}/Source/cmake/modules")
list(APPEND CMAKE_MODULE_PATH "${HUNTER_ROOT}/Source/cmake/find")

include(hunter_status_debug)
include(hunter_status_print)
include(hunter_fatal_error)

if(HUNTER_ROOT_OLD)
  string(COMPARE NOTEQUAL "${HUNTER_ROOT_OLD}" "${HUNTER_ROOT}" HUNTER_RESULT)
  if(HUNTER_RESULT)
    hunter_fatal_error(
        "Incorrent HUNTER_ROOT directories:\n"
        "defined: ${HUNTER_ROOT_OLD}\n"
        "real: ${HUNTER_ROOT}"
    )
  endif()
  unset(HUNTER_RESULT)
endif()

unset(HUNTER_ROOT_OLD)

if(CYGWIN)
  # Make generator has problems with windows paths
  execute_process(
      COMMAND
      cygpath
      --absolute
      "${HUNTER_ROOT}"
      OUTPUT_VARIABLE
      HUNTER_ROOT
      RESULT_VARIABLE
      _hunter_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT _hunter_result EQUAL 0)
    hunter_fatal_error("cygpath failed")
  endif()
endif()

hunter_status_print("HUNTER_ROOT: ${HUNTER_ROOT}")

set(HUNTER_BASE "${HUNTER_ROOT}/Base")

### Check 'EP_BASE` correctness
get_directory_property(HUNTER_EP_BASE_OLD EP_BASE)

if(HUNTER_EP_BASE_OLD)
  hunter_fatal_error("EP_BASE directory property already set")
endif()

unset(HUNTER_EP_BASE_OLD)

set_directory_properties(
    PROPERTIES
    EP_BASE
    "${HUNTER_BASE}"
)

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
  hunter_status_debug(
      "CMAKE_DEBUG_POSTFIX is empty, set to '${CMAKE_DEBUG_POSTFIX}'"
  )
endif()

if(NOT HUNTER_INSTALL_TAG)
  if(MSVC)
    string(REPLACE "Visual Studio" "vs" HUNTER_INSTALL_TAG "${CMAKE_GENERATOR}")
    string(REPLACE " " "-" HUNTER_INSTALL_TAG "${HUNTER_INSTALL_TAG}")
    string(TOLOWER "${HUNTER_INSTALL_TAG}" HUNTER_INSTALL_TAG)
  elseif(MINGW)
    set(HUNTER_INSTALL_TAG "mingw")
  elseif(CYGWIN)
    set(HUNTER_INSTALL_TAG "cygwin")
  else()
    set(HUNTER_INSTALL_TAG "default")
  endif()
  hunter_status_debug(
      "HUNTER_INSTALL_TAG is empty, set to '${HUNTER_INSTALL_TAG}'"
  )
endif()

if(MSVC)
  include(hunter_setup_msvc_arch)
  include(hunter_setup_msvc_vcvarsall)
  hunter_setup_msvc_arch()
  hunter_setup_msvc_vcvarsall()
endif()

### Cache default cmake generator
include(hunter_set_cmake_default_generator)
hunter_set_cmake_default_generator()

### 1. Clear all '<NAME>_ROOT' variables (cache, environment, ...)
### 2. Set '<NAME>_ROOT' or 'HUNTER_<name>_VERSION' variables
include("${HUNTER_ROOT}/Source/cmake/config.cmake")
