# Copyright (c) 2013-2015, Ruslan Baratov
# All rights reserved.

if(DEFINED HUNTER_CMAKE_HUNTER_)
  return()
else()
  set(HUNTER_CMAKE_HUNTER_ 1)
endif()

project(Hunter)

option(HUNTER_ENABLED "Enable Hunter package manager support" ON)
option(HUNTER_STATUS_PRINT "Print working status" ON)
option(HUNTER_STATUS_DEBUG "Print a lot info" OFF)

### add cmake modules to search path
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/find")

include(hunter_add_package) # For user project
include(hunter_apply_gate_settings)
include(hunter_calculate_self)
include(hunter_create_cache_file)
include(hunter_status_debug)
include(hunter_status_print)

string(COMPARE NOTEQUAL "$ENV{HUNTER_BINARY_DIR}" "" _env_not_empty)
if(_env_not_empty)
  get_filename_component(HUNTER_BINARY_DIR "$ENV{HUNTER_BINARY_DIR}" ABSOLUTE)
  hunter_status_debug("HUNTER_BINARY_DIR: ${HUNTER_BINARY_DIR}")
endif()

# * Read HUNTER_GATE_* variables
# * Check cache HUNTER_* variables is up-to-date
# * Update cache if needed
hunter_apply_gate_settings()

hunter_calculate_self(
    "${HUNTER_CACHED_ROOT}"
    "${HUNTER_VERSION}"
    "${HUNTER_SHA1}"
    HUNTER_SELF
)

string(SUBSTRING "${HUNTER_SHA1}" 0 7 HUNTER_ID)
string(SUBSTRING "${HUNTER_CONFIG_SHA1}" 0 7 HUNTER_CONFIG_ID)
string(SUBSTRING "${HUNTER_TOOLCHAIN_SHA1}" 0 7 HUNTER_TOOLCHAIN_ID)

set(HUNTER_ID_PATH "${HUNTER_CACHED_ROOT}/_Base/${HUNTER_ID}")
set(HUNTER_CONFIG_ID_PATH "${HUNTER_ID_PATH}/${HUNTER_CONFIG_ID}")
set(HUNTER_TOOLCHAIN_ID_PATH "${HUNTER_CONFIG_ID_PATH}/${HUNTER_TOOLCHAIN_ID}")

set(HUNTER_INSTALL_PREFIX "${HUNTER_TOOLCHAIN_ID_PATH}/Install")
list(APPEND CMAKE_PREFIX_PATH "${HUNTER_INSTALL_PREFIX}")

hunter_status_print("HUNTER_ROOT: ${HUNTER_CACHED_ROOT}")
hunter_status_debug("HUNTER_TOOLCHAIN_ID_PATH: ${HUNTER_TOOLCHAIN_ID_PATH}")
hunter_status_debug(
    "HUNTER_CONFIGURATION_TYPES: ${HUNTER_CACHED_CONFIGURATION_TYPES}"
)

set(_id_info "[ Hunter-ID: ${HUNTER_ID} |")
set(_id_info "${_id_info} Config-ID: ${HUNTER_CONFIG_ID} |")
set(_id_info "${_id_info} Toolchain-ID: ${HUNTER_TOOLCHAIN_ID} ]")

hunter_status_print("${_id_info}")

set(HUNTER_CACHE_FILE "${HUNTER_TOOLCHAIN_ID_PATH}/cache.cmake")
hunter_create_cache_file("${HUNTER_CACHE_FILE}")

if(MSVC)
  include(hunter_setup_msvc_arch)
  include(hunter_setup_msvc_vcvarsall)
  hunter_setup_msvc_arch()
  hunter_setup_msvc_vcvarsall()
endif()

### Disable package registry
### http://www.cmake.org/cmake/help/v3.1/manual/cmake-packages.7.html#disabling-the-package-registry
set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON)
set(CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY ON)
set(CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY ON)
### -- end

### 1. Clear all '<NAME>_ROOT' variables (cache, environment, ...)
### 2. Set '<NAME>_ROOT' or 'HUNTER_<name>_VERSION' variables
set(HUNTER_ALLOW_CONFIG_LOADING YES)
include("${HUNTER_CONFIG_ID_PATH}/config.cmake")
set(HUNTER_ALLOW_CONFIG_LOADING NO)
