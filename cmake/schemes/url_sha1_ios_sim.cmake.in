# Copyright (c) 2013, Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.0)

include(ExternalProject) # ExternalProject_Add

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(hunter_assert_lists_equal)
include(hunter_status_debug)
include(hunter_test_string_not_empty)

hunter_status_debug("Scheme: url_sha1_ios_sim")

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_BASE@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_BASENAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_URL@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SHA1@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_INSTALL_DIR@")

hunter_assert_lists_equal(@HUNTER_DOWNLOAD_SCHEME_VARIANTS@)

set_directory_properties(
    PROPERTIES
    EP_BASE
    "@HUNTER_BASE@"
)

execute_process(
    COMMAND xcrun -f clang++
    RESULT_VARIABLE result
    OUTPUT_VARIABLE compiler
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

if(NOT result EQUAL 0)
  message(FATAL_ERROR "`xcrun -f clang++` failed")
endif()

ExternalProject_Add(
    @HUNTER_PACKAGE_BASENAME@
    URL
    @HUNTER_PACKAGE_URL@
    URL_HASH
    SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_DIR@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ""
    BUILD_COMMAND
    "CC=${compiler}" && . "@HUNTER_SELF@/scripts/clear-all.sh" &&
    xcodebuild -target ios-sim -configuration Release
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    "${CMAKE_COMMAND}" -E copy build/Release/ios-sim "@HUNTER_PACKAGE_INSTALL_DIR@"
)
